'''
Snakefile 

Authors:
Layer Lab

Adapted from supplementary materials of:

Bertolotti, Alicia C., et al. 'The structural variation landscape
in 492 Atlantic salmon genomes.' bioRxiv (2020).
'''
import utils

# extract the sample name. 
sample_name = utils.get_sample_name()

rule all:
    input:
        utils.get_dir('output', ['localtest-indexcov', 'index.html']), 
        utils.get_dir('output', ['smoove', 'results', 'genotyped', 'localTest-smoove.genotyped.vcf.gz'])        

# indexing the reference must be done at all time
rule bwa_index_reference: 
    input:
        utils.get_file('reference')
    output: 
        utils.get_dir('temp', [os.path.basename(utils.get_file('reference'))])
    log:
        utils.get_dir('logs', ['bwa_index_reference.log'])
    conda:
        'envs/bwa_idx_ref.yaml'
    shell:
        utils.move_ref_to_temp_cmd() + 'bwa index -p {output} {output} &> {log}' 

rule samtools_faidx:
    input:
        utils.get_file('reference')
    output: 
        utils.get_dir('temp', [os.path.basename(utils.get_file('reference')) + '.fai'])
    log: 
        utils.get_dir('logs', ['samtools_faidx.log'])
    conda: 
        'envs/samtools.yaml'
    shell:
        'samtools faidx {input} -o {output}'

rule bwa_map:
    input:
        # "reverse" is a keyword internally to snakemake, so we have to shorten it to rev
        reference = rules.bwa_index_reference.output,
        forward = utils.get_file('forward'),
        rev = utils.get_file('reverse')
    output:
        utils.get_dir('temp', ['mapped_reads', '{sample_name}.bam'])
    params:
        rg = '@RG\\tID:{sample_name}\\tSM:{sample_name}\\tLB:lib1' 
    log:
        utils.get_dir('logs', ['bwa_map_{sample_name}.log'])
    conda:
        'envs/map.yaml'
    threads:
        # its ok if this is more threads than are available to us. Snakemake
        # does the operation: threads = min(threads, cores) so we can't go over
        threads = workflow.cores
    shell:
        '(bwa mem -R "{params.rg}" -t {threads} {input.reference}'
        ' {input.forward} {input.rev} | samtools view -Sb > {output})'
        ' 2> {log}'

rule samtools_sort:
    input:
        rules.bwa_map.output
    output:
        utils.get_dir('temp', ['sorted_reads', '{sample_name}.bam'])
    params:
        samtools_temp = utils.get_dir('temp', ['sorted_reads', sample_name])
    log:
        utils.get_dir('logs', ['samtools_sort_{sample_name}.log'])
    conda:
        'envs/samtools.yaml'
    shell:
        'samtools sort -T {params.samtools_temp} -O bam {input} > {output} 2> {log}'

rule samtools_index:
    input:
        rules.samtools_sort.output
    output:
        utils.get_dir('temp', ['sorted_reads', '{sample_name}.bam.bai'])
    log:
        utils.get_dir('logs', ['samtools_index_{sample_name}.log'])
    conda:
        'envs/samtools.yaml'
    shell:
        'echo {input} && samtools index {input}'

rule goleft_indexcov:
    input:
        bam = rules.samtools_sort.output,
        # NOTE: keep the bai here. Although we don't use it, its necessary to force 
        # snakemake to run samtools_index to get the bai file before we can run goleft
        bai = rules.samtools_index.output
    output:
        utils.get_dir('output', ['{sample_name}-indexcov', 'index.html'])
    params:
        output_dir = get_dir('output', ['{sample_name}-indexcov'])
    log:
        utils.get_dir('logs', ['goleft_indexcov_{sample_name}.log'])
    conda:
        'envs/goleft.yaml'
    shell:
        'goleft indexcov -d {params.output_dir} {input.bam} 2> {log}'

#----------              NOTE                    ----------#
'''
In the paper, they separate the two snakefiles and call a python script in 
the middle the extract gap regions in the genome and convert to a BED file. 
That script will be integrated here. This note is so that I don't forget
'''

rule extract_gap_regions:
    input:
        utils.get_file('reference')
    output:
        utils.get_dir('temp', ['output_ranges.bed'])
    log:
        utils.get_dir('logs', ['extract_gap_regions.log'])
    script:
        './scripts/extractGapRegions.py'

rule call:
    input:
        bam = rules.samtools_sort.output,
        bai = rules.samtools_index.output,
        exclude = rules.extract_gap_regions.output, 
        ref = rules.bwa_index_reference.output, 
        ref_idxed = rules.samtools_faidx.output	
    output:
        utils.get_dir('temp', ['smoove', 'results', 'called', '{sample_name}-smoove.genotyped.vcf.gz'])
    params:
        temp_dir = utils.get_dir('temp', ['smoove', 'results', 'called'])
    log:
        utils.get_dir('logs', ['smoove_call_{sample_name}.log'])
    conda:
        'envs/smoove.yaml'
    shell:
        'smoove call --outdir {params.temp_dir} --exclude {input.exclude}'
        ' -name {sample_name} --fasta {input.ref} -p 1 --genotype {input.bam}'

rule genotype:
    input: 
        vcf = rules.call.output,
        bam = rules.samtools_sort.output, 
        bai = rules.samtools_index.output, 
        ref = rules.bwa_index_reference.output, 
        ref_idxed = rules.samtools_faidx.output
    output:
        utils.get_dir('output', ['smoove', 'results', 'genotyped', '{sample_name}-smoove.genotyped.vcf.gz'])
    log:
        utils.get_dir('logs', ['smoove_genotype_{sample_name}.log'])
    params:
        output_dir = utils.get_dir('output', ['smoove', 'results', 'genotyped'])
    conda:
        'envs/smoove.yaml'
    shell: 
        'smoove genotype -d -x -p 1 --name {sample_name} -outdir {params.output_dir}'
        ' --fasta {input.ref} --vcf {input.vcf} {input.bam}'
